doctype html
head
  meta(charset="utf-8")
  title Move Documentation
  link(rel="stylesheet", href="index.css")
body
  h1 Move
  p Move makes animating the properties of DOM/SVG elements easy with a clean expressive API. Combine it with <a href="//github.com/jkroso/timeline">something</a> to manage the timing between animations and you can really make your page dance.

  h2 Limitations
  ul
    li Coordinating animations
    p If you animated the same property of the same element with 2 different instances of Move then only one second one will be visible. This may seem obvious and not a problem but if your triggering animations from async events then you will need to keep track of old instances so you can stop them before starting the next ones. If your using CSS transitions you don't need to worry about this. <a href="//github.com/visionmedia/move.js">move.js</a> is a good animation lib based on CSS transitions.

  h2 Advantages
  ul
    li Full control over progress
    p Animations don't have to be time based. Sometimes its nice base an animation on page scrolling or the progress of an HTTP request.

  h2 Examples
  #examples
    div.example
      h3 Move#set(prop, val) <button class="play">▶</button>
      p Set <em>prop</em> to <em>val</em>.
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .set('margin-left', 200)
          .run('1s')

    div.example
      h3 Move#add(prop, val) <button class="play">▶</button>
      p Increment <em>prop</em> by <em>val</em>, where <em>val</em> is an Number (click several times).
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .add('margin-left', 200)
          .run('1s')

    div.example
      h3 Move#sub(prop, val) <button class="play">▶</button>
      p Decrement <em>prop</em> by <em>val</em>, where <em>val</em> is an Number (click several times).
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .sub('margin-left', 100)
          .run('1s')

    div.example
      h3 Move#rotate(deg) <button class="play">▶</button>
      p Rotate by <em>deg</em>.
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .rotate(140)
          .run('1s')

    div.example
      h3 Move#duration(n) <button class="play">▶</button>
      p Set animation duration to <em>n</em> which is a Number or a string such as "4s".
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .set('background-color', 'blue')
          .duration('2s')
          .run()

    div.example
      h3 Move#translate(x[, y]) <button class="play">▶</button>
      p Translate <em>x</em> and optionally <em>y</em> axis.
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .translate(100, 20)
          .run('1s')

    div.example
      h3 Move#x(n) / Move#y(n) <button class="play">▶</button>
      p Translate <em>x</em> or <em>y</em> axis. Aliased by <code>Move#translateX(n)</code> and <code>Move#translateY(n)</code>.
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .x(100)
          .y(20)
          .run('1s')

    div.example
      h3 Move#skew(x[, y]) <button class="play">▶</button>
      p Skew <em>x</em>, and optionally <em>y</em>. <code>Move#skewX(n)</code> and <code>Move#skewY(n)</code> are also available.</p>
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .skew(50)
          .run('1s')

    div.example
      h3 Move#scale(x[, y]) <button class="play">▶</button>
      p Scale the <em>x</em>, and optionally <em>y</em> axis. <code>Move#scaleX(n)</code> and <code>Move#scaleY(n)</code> are also available.
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .scale(3)
          .run('1s')

    div.example
      h3 Move#then(fn) <button class="play">▶</button>
      p The <code>then()</code> method triggers the animation to run. Optionally you can pass in a callback <code>fn</code> to call when the animation completes.
      div.sandbox
        div.box.small
      pre.source: code.
        move(box)
          .set('background-color', 'blue')
          .duration('1s')
          .then(function(){
            move(box)
              .set('background-color', 'aliceblue')
              .run('1s')
          })

    div.example
      h3 Move#then([move]) <button class="play">▶</button>
      p  Creates a <code>DeferredMove</code> which will be run when this move completes. Optionally you can pass in a Move instance and it will be run on completion of this animation.
      div.sandbox
        div.box.small
        div.box.small
      pre.source: code.
        var moveBack = move(boxs[0])
          .duration(500)
          .set('background-color', 'aliceblue')
          .x(0)

        move(boxs[0])
          .duration('1s')
          .set('background-color', 'blue')
          .x(500)
          .then(moveBack)

        move(boxs[1])
          .duration(500)
          .set('background-color', 'blue')
          .x(500)
          .scale(.5)
          .rotate(60)
          .then()
            .rotate(30)
            .scale(2)
            .set('border-radius', 5)
            .set('opacity', 0)
            .then()
              .rotate(270)
              .x(-500)
              .set('background-color', 'aliceblue')
              .set('border-radius', 0)
              .set('opacity', 1)

    div.example
      h3 Move#ease(fn) <button class="play">▶</button>
      p Use the given easing <code>fn</code>. The default function is "linear". For a complete list of available functions see <a href="http://github.com/component/ease">component/ease</a>
      div.sandbox
        div.box.small.wide linear
        div.box.small.wide in-quad
        div.box.small.wide out-quad
        div.box.small.wide in-out-quad
      pre.source: code.
        boxs.forEach(function(box){
          move(box)
            .duration('1s')
            .ease(box.textContent)
            .x(400)
            .then()
              .x(-400)
        })

    div.example
      h3 Move#render(n) <input type="range" value="0"/>
      p render allows you to control the animation
      svg.sandbox(
        xmlns="http://www.w3.org/2000/svg"
        link="http://www.w3.org/1999/xlink"
        style="height:300px;"
        version="1.1")
        path#circle(d="m 200 50 a 100 100 0 0 1 100 100 a 100 100 0 0 1 -100 100 a 100 100 0 0 1 -100 -100 a 100 100 0 0 1 100 -100")
      pre.source: code.
        var anim = move('#circle').set('d', '\
          m 300,150 \
          c 0,50 -50,50 -50,0 \
          s -50,-50 -50,0 \
          s -50,50 -50,0 \
          s -50,-50 -50,0')
        example.find('input').on('change', function(e){
          anim.render(this.value/100)
        })

    div.example
      h3 Move(svg) <button class="play">▶</button>
      p Move handles SVG elements transparently. Just go ahead and use all the same methods.
      svg.sandbox(
        xmlns="http://www.w3.org/2000/svg"
        link="http://www.w3.org/1999/xlink"
        style="height:300px;"
        version="1.1")
        path#circle(d="m 200 50 a 100 100 0 0 1 100 100 a 100 100 0 0 1 -100 100 a 100 100 0 0 1 -100 -100 a 100 100 0 0 1 100 -100")
      pre.source: code.
        move('#circle')
          .set('d', '\
            m 200 50 \
            l 100 100 \
            l -100 100 \
            l -100 -100 \
            l 100 -100')
          .ease('out-sine')
          .duration('.5s')
          .then()
            .set('d', '\
              m 300,150 \
              c 0,50 -50,50 -50,0 \
              s -50,-50 -50,0 \
              s -50,50 -50,0 \
              s -50,-50 -50,0')
            .then()
              .set('d', '\
                m 200 100 \
                l 50 47 \
                a 6 6 0 0 1 0 6 \
                l -50 47 \
                l 0 -100')

  script(src="examples.js")
